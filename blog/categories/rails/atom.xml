<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | El SysAdmin del 3er Mundo]]></title>
  <link href="http://uranio-235.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://uranio-235.github.io/"/>
  <updated>2017-09-04T12:02:00-04:00</updated>
  <id>http://uranio-235.github.io/</id>
  <author>
    <name><![CDATA[låzaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DataTables en español]]></title>
    <link href="http://uranio-235.github.io/blog/2017/01/20/datatables-espanol/"/>
    <updated>2017-01-20T16:39:32-05:00</updated>
    <id>http://uranio-235.github.io/blog/2017/01/20/datatables-espanol</id>
    <content type="html"><![CDATA[<p>Siempre hay un cliente exquisito que le molesta la aplicación completa en
español, a excepción del puñetero paginador que está en inglés.</p>

<p>Como ya no uso kaminari ni will_paginate la cosa se complica. Decidí llamar a
todas las tables id=&ldquo;latabla&rdquo; y en el <strong>application.js</strong>, según la
documentación de la API de DataTables, le ponemos la clave <em>language</em> con sus
pertinentes componentes.</p>

<pre><code class="javascript "application.js"">$(document).ready(function() {

    $('#latabla').DataTable( {

      "language": {
        "decimal":        ".",
        "emptyTable":     "No hay datos para mostrar",
        "info":           "del _START_ al _END_ (_TOTAL_ total)",
        "infoEmpty":      "del 0 al 0 (0 total)",
        "infoFiltered":   "(filtrado de todas las _MAX_ entradas)",
        "infoPostFix":    "",
        "thousands":      "'",
        "lengthMenu":     "Mostrar _MENU_ entradas",
        "loadingRecords": "Cargando...",
        "processing":     "Procesando...",
        "search":         "Buscar:",
        "zeroRecords":    "No hay resultados",
        "paginate": {
          "first":      "Primero",
          "last":       "Último",
          "next":       "Siguiente",
          "previous":   "Anterior"
        },
        "aria": {
          "sortAscending":  ": ordenar de manera Ascendente",
          "sortDescending": ": ordenar de manera Descendente ",
        }
      }

    } );

} ); // document ready
</code></pre>

<p>Claro, realmente no lo hice así, ya que en vez de <strong>&ldquo;Anterior&rdquo;</strong> puse
<strong>t(:dt_prev)</strong>  y cree su pertinente fichero de idioma con la traducción, pero
escribí esta entrada pensando en gente que puede o no usar RoR. No obstante, el
buen desarrollador de rails, sabe que lo correcto sería usar la in API de i18n.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails en alpine]]></title>
    <link href="http://uranio-235.github.io/blog/2016/12/09/rails-en-alpine/"/>
    <updated>2016-12-09T20:14:28-05:00</updated>
    <id>http://uranio-235.github.io/blog/2016/12/09/rails-en-alpine</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/shinkasen.jpg" width="400" height="500" title="" ></p>

<p>Finalmente el boom de docker llegó a Cuba. En mi caso personal, hace rato lo uso
para desplegar aplicaciones de Ruby on Rails y siempre me pareció que debian era
la mejor base para hacer una imagen. Si bien, hay containers de rails, eso de
usar en producción, con una distro hecha por un cualquiera, como que me da cosa.
Hacer una a partir de la oficial, es más sencillo que verificar la integridad de
una ya hecha.</p>

<p>AlpineLinux para docker es un batazo, eso es in-negable. Pero instalar rails en
alpine, resultó ser más complicado de lo que yo pensaba.</p>

<pre><code class="bash "docker y alpine"">docker pull alpine
docker run -ti alpine /bin/sh
</code></pre>

<p>Ante todo necesitamos instalar las librerías requeridas para compilar, sobre
todo las dependencias de nokogiri. Instalaremos los paquetes: build-base,
nodejs, tzdata, libxml2-dev,  libxslt-dev, sqlite-dev y claro, ruby</p>

<p>En este caso, usaremos sqlite como ejemplo, pero a ti quizás te cuadre más con
<strong>mariadb-dev</strong> (mysql) o <strong>postgresql-dev</strong></p>

<pre><code class="bash "apk add"">apk update
apk add build-base nodejs tzdata libxml2-dev  libxslt-dev
apk add sqlite-dev mariadb-dev postgresql-dev
apk add ruby ruby-dev ca-certificates libffi libffi-dev
</code></pre>

<p>Como nokogiri es un caso tan peculiar, le diremos que compile usando las
librerías del sistema, para ellos lo instalaremos aparte. Alpine <strong>no</strong> usa
glibc, usa musl-libc y nokogiri NO compila, por tanto, hay que usar las
librerías del sistema; en vez de las que provee nokogiri.</p>

<pre><code class="bash "nokogiri"">gem inst --no-document nokogiri -- --use-system-libraries
</code></pre>

<p>Con eso ya tenemos los cimientos echados. Nuestra imagen habrá crecido 200
megas. Ahora vamos instalar rails.</p>

<pre><code class="bash "gem"">gem inst --no-document rails io-console
</code></pre>

<p>El paso de instalar rails como gema del sistema es cuestionable para una pila de
gente; pero ten en cuenta que es la manera de saber si rails funciona, recuerda
que esto es un ejemplo. La primera vez me topé con que debía instalar
<strong>io-console</strong>, ya que a pesar de ser dependencia, nadie la requería. Bueno a
ver&hellip;</p>

<pre><code class="bash "rails"">/ # rails -v
Rails 5.0.0.1
</code></pre>

<p>Tengo una imagen llamada &ldquo;alpine_ruby&rdquo; en la que tengo todo lo necesario para
instalar y No tengo la gema de rails instalada. Entonces, con cada versión de
rails, por ejemplo, derivar de &ldquo;alpine_ruby&rdquo; la imagen alpine_rails50 , así
cuando salga el rails 5.1 le llamaré alpine_rails51</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[data confirm en un boton]]></title>
    <link href="http://uranio-235.github.io/blog/2016/02/22/data-confirm-en-un-boton/"/>
    <updated>2016-02-22T14:20:33-05:00</updated>
    <id>http://uranio-235.github.io/blog/2016/02/22/data-confirm-en-un-boton</id>
    <content type="html"><![CDATA[<p>Usualmente, tenemos un botón en un formulario y nos gustaría que al pulsar este,
nos preguntara algo para confirmar. He aquí un buen ejemplo:</p>

<pre><code class="rhtml "_navbar.html.erb"">  &lt;%= form_tag manager_email_path,class: 'navbar-form navbar-left',role: 'search',method: :post do %&gt;
    &lt;div class="form-group"&gt;
      &lt;input name="email" type="text" class="form-control" placeholder="fulanito@infomed.sld.cu"&gt;
    &lt;/div&gt;
     &lt;%= button_tag(:class =&gt; "btn btn-default", data: {:confirm =&gt; 'Seguro?'} ) do %&gt;
        Enviar
     &lt;% end %&gt;
  &lt;% end %&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[date_select en español]]></title>
    <link href="http://uranio-235.github.io/blog/2015/07/12/date-select-en-espanol/"/>
    <updated>2015-07-12T15:14:12-04:00</updated>
    <id>http://uranio-235.github.io/blog/2015/07/12/date-select-en-espanol</id>
    <content type="html"><![CDATA[<p>Algunos componentes de <a href="http://rubyonrails.org/">Ruby on Rails</a>, se pueden usar
de manera independiente, como es el caso de
<a href="https://github.com/rails/rails/tree/master/activerecord">active_record</a> (sin
dudas es el más potente). Pero otro que no se queda atrás, es active_support.
Lleno de sorpresas y de joyas poco documentadas.</p>

<p>Para el que no lo conozca, en ruby on rails, hay un método muy cómodo que genera
un <a href="https://www.w3.org/wiki/HTML/Elements/select"><strong>select</strong></a> cuyas <em>option</em> son nada menos que la fecha. Los usuarios
mononeuronales, encuentran más cómodo introducir una fecha así, que con un
datepicker.</p>

<p>El método <a href="http://apidock.com/rails/ActionView/Helpers/DateHelper/select_date"><strong>select_date</strong></a> genera una cosa similar a esta:</p>

<p><select id="caudocidad_day" name="caudocidad[day]">
<option value="12" selected="selected">12</option>
</select>
<select id="caudocidad_month" name="caudocidad[month]">
<option value="8" selected="selected">Agosto</option>
</select>
<select id="caudocidad_year" name="caudocidad[year]">
<option value="2015" selected="selected">2015</option>
</select></p>

<p>Pero con todos los meses y sus días claro. Ahí soló te puse un pedazito. Para
generar esto, se supone que solo necesites poner algo como:</p>

<pre><code class="erb "select_date"">&lt;%= select_date Date.today, prefix: :caudocidad %&gt;
</code></pre>

<p>Luego en el controlador, generas la fecha, procesando el dato. Hay mil y una
forma de hacerlo. Más mágica y menos mágica, yo lo hago de una manera bien
rudimentaria:</p>

<pre><code class="ruby "Time.mktime en el controller"">@cuando=Time.mktime params[:caudocidad][:year],params[:caudocidad][:month],params[:caudocidad][:day]
</code></pre>

<p>Como vez, a <strong>prefix:</strong> se le mandó un símbolo, que pasó a ser el valor del HTML
generado, <strong>name=&ldquo;caudocidad&rdquo;</strong>. En mi caso, se llama &ldquo;cadocidad&rdquo; usted le pone
como le de la gana. Sería :prefix=>&lsquo;nombre_que_quieras&rsquo; o prefix: &lsquo;nombre&rsquo; en su
versión corta.</p>

<p>En el controlador, <strong>params[:caudocidad]</strong>, contiene un Hash, donde las claves
<strong>:year</strong>, <strong>:month</strong> y <strong>:day</strong> tendrán los valores numéricos listos para ser
procesados.</p>

<pre><code class="ruby params[:caudocidad]">{:year=&gt;2015, :month=&gt;8, :day=&gt;12}
</code></pre>

<p>Todo eso está muy bonito, pero lo jodido del caso, es que los meses vienen en
inglés.</p>

<p>Llevarlo a español, requiere estar un poco familiarizado con el
<a href="http://guides.rubyonrails.org/i18n.html">i18n</a> de Ruby on rails.</p>

<p>Para el que no lo conozca, el i18n, es un sistema que nos permite crear
aplicaciones en múltiples idiomas. De forma tal que nuestra aplicación le hable
al navegador en el idioma que este soporta. Lo malo del caso es que no lo hace
solo. Serás tu quien deba indicarle cuando usar que idioma. Una buena manera de
hacer eso, es parseando el encabezado &ldquo;content-&rdquo; para ver que idioma soporta el
navegador. Métodos hay miles, pero no se porque rails no lo hace solo.</p>

<p>Si nuestra aplicación fuera canadiense, le diría que cree un fichero para cada
idioma. Pero como nuestra aplicación es Cubana, con ponerlo todo en el
<strong>en.yml</strong> resolvemos el problema.</p>

<p>Al principio me fajaba con el <strong>en.yml</strong> y trataba de ponerle cosas, pero luego
descubrí que hay una especie de esqueleto en la gema de active_support.</p>

<p>En vez de escribir un en.yml desde cero, podemos usar el que está en
active_support. Ejecuta este comando:</p>

<pre><code class="bash "buscando el en.yml""> gem  cont activesupport|grep en.yml
</code></pre>

<p>Copia dicho fichero a tu <strong>config/locales/en.yml</strong> y comencemos a editarlo.</p>

<p>En la linea 30 y pico. Hay una cláusula llamada <strong>month_names</strong>, ahí le pones
los meses. A mi me quedó así:</p>

<pre><code class="ruby "month_names, cerca de la linea 30"">
    # Don't forget the nil at the beginning; there's no such thing as a 0th month
    month_names: [~, Enero, Febrero, Marzo, Abril, Mayo, Junio, Julio, Agosto, Septiembre, Octubre, Novimebre, Diciembre]
    abbr_month_names: [~, Ene, Feb, Mar, Abr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec]
</code></pre>

<p>Además, más abajo, por la linea 40, tienes el orden en el que se muestra la
fecha.</p>

<pre><code class="ruby "order: bajo la linea 40"">    # Used in date_select and datetime_select.
    order:
      - day
      - month
      - year
</code></pre>

<p>A mi me quedó así, porque los yumas ponen el mes delante y el día detrás.</p>

<p>Si miras más abajo, verás que tiene incluso la moneda (currency) y los
separadores, por ejemplo, usar coma en vez de punto para separar los decimales.
También están los numerales (millones, millares, centenas, etc&hellip;)</p>

<p>Hay un método muy curioso que yo uso mucho. Convierte un array en una oración
delimitada por coma; pero pone una conjunción &ldquo;y&rdquo; en el último elemento.</p>

<pre><code class="ruby 'to_sentence'">irb(main):&gt; %w[perros gatos].to_sentence
=&gt; "perros y gatos"

irb(main):&gt; %w[papas malangas calabazas].to_sentence
=&gt; "papas, malangas y calabazas"
</code></pre>

<p>El separador se configura ahí también. Por defecto dice &ldquo;<strong>and</strong>&rdquo; en vez de &ldquo;<strong>y</strong>&rdquo;</p>

<p>Conclusión:</p>

<p>La instrumentación de active_support (ese nombre tan suigeneris se lo pusieron
ellos) es bastante rica. Deberían verla bien de cerca. La guia es bastante
escueta; te recomiendo que mires un poco el código fuente de active_support o la
documentación de la API (que es casi lo mismo).</p>

<p>Si buscas en la misma ruta, pero con <em>model</em> donde dice <em>support</em> verás el YAML
que utiliza ActiveRecord para generar los errores de validación. Ahí puedes
ponerlos a tu manera. Osea, el contenido de ese YAML se lo adicionas al tuyo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[añadir verbo a un scaffold]]></title>
    <link href="http://uranio-235.github.io/blog/2015/07/05/anadir-verbo-a-un-scaffold/"/>
    <updated>2015-07-05T21:35:54-04:00</updated>
    <id>http://uranio-235.github.io/blog/2015/07/05/anadir-verbo-a-un-scaffold</id>
    <content type="html"><![CDATA[<p>Cualquiera que sepa como usar debidamente los scaffolds, o sea, cualquiera que
sepa como hacerle la paja a ruby on rails para que haga lo que queremos; seguro
habrá intentado en algún momento, añadir un nuevo método a un scaffold. Además,
de seguro quisiste luego poder llamarlo con los métodos &ldquo;metodo_user_path&rdquo; y que
la ruta se cree de manera automática.</p>

<p>Por ejemplo, en este caso, tengo el scaffold <strong>user</strong> y le agregué el método
<strong>cambiar</strong> aparte de los clásicos PUT y DELETE.</p>

<pre><code class="ruby "scope de users_controller.rb"">
  # cambia el estado de habilitación del usuarios
  def cambiar
     @user.enabled=!@user.enabled
     @user.save
     redirect_to :back
  end

  # GET /users
  def index
    @users = User.all
  end
</code></pre>

<p>Pero el método cambiar no aparece en rails hasta que no hagas lo siguiente en el
fichero de las rutas.</p>

<pre><code class="ruby "config/routes.rb"">
   # el scaffold de los usuarios
   resources :users do

      # agregamos el verbo cambiar usado para
      # @user.enabled=!@user.enabled
      # para que exista: cambiar_user_path
      member do 
         get 'cambiar'
      end

   end
</code></pre>

<p>Ahora existirá el método <strong>cambiar_user_path</strong> que toma como argumento el
usuario.</p>

<p>   cambiar_user_path(user)</p>

<p>De esta manera, se le manda el objeto usuario y genera una URL como</p>

<p>   /users/345/cambiar</p>

<p>Dicha ruta macheará el método User#cambiar</p>
]]></content>
  </entry>
  
</feed>
