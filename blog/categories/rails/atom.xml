<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | El SysAdmin del 3er Mundo]]></title>
  <link href="http://uranio-235.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://uranio-235.github.io/"/>
  <updated>2016-09-22T18:12:37-04:00</updated>
  <id>http://uranio-235.github.io/</id>
  <author>
    <name><![CDATA[låzaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[data confirm en un boton]]></title>
    <link href="http://uranio-235.github.io/blog/2016/02/22/data-confirm-en-un-boton/"/>
    <updated>2016-02-22T14:20:33-05:00</updated>
    <id>http://uranio-235.github.io/blog/2016/02/22/data-confirm-en-un-boton</id>
    <content type="html"><![CDATA[<p>Usualmente, tenemos un botón en un formulario y nos gustaría que al pulsar este,
nos preguntara algo para confirmar. He aquí un buen ejemplo:</p>

<pre><code class="rhtml "_navbar.html.erb"">  &lt;%= form_tag manager_email_path,class: 'navbar-form navbar-left',role: 'search',method: :post do %&gt;
    &lt;div class="form-group"&gt;
      &lt;input name="email" type="text" class="form-control" placeholder="fulanito@infomed.sld.cu"&gt;
    &lt;/div&gt;
     &lt;%= button_tag(:class =&gt; "btn btn-default", data: {:confirm =&gt; 'Seguro?'} ) do %&gt;
        Enviar
     &lt;% end %&gt;
  &lt;% end %&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[assets por controlador]]></title>
    <link href="http://uranio-235.github.io/blog/2015/10/05/assets-por-controlador/"/>
    <updated>2015-10-05T21:45:45-04:00</updated>
    <id>http://uranio-235.github.io/blog/2015/10/05/assets-por-controlador</id>
    <content type="html"><![CDATA[<p><strong>NUNCA</strong>, he logrado entender, porque el asset pipeline de Rails carga
<strong>TODAS</strong> las porquerías de todos los controladores en todas las vistas.</p>

<p>¡¡¡Como si fuese poco tener que cargar el mismo javascript por controlador!!!</p>

<p>La documentación dice que puedes cargar solamente el del controlador; pero
cuando la sigues al pie de la letra; Rails te da tremendo palo, diciendo que una
asset se escapó sin compilar. La &ldquo;una&rdquo; suele ser la del controlador que estés
cargando, o sea, todas.</p>

<p>La solución que plantea la documentación, es un Proc asqueroso que tampoco
pincha.</p>

<p>Te cuento como lo hice:</p>

<p>Primero tienes que quitar la cláusula &ldquo;<strong>require_tree .</strong>&rdquo; del <strong>application.js</strong></p>

<p>A mi me quedó así:</p>

<pre><code class="js application.js">// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//  require_tree . fíjate que quitamos el =
Turbolinks.enableProgressBar();
</code></pre>

<p>Ahora vamos a dar un toque mágico para que las assets se compilen de manera
dinámica, sin tener que colocarle manualmente al arreglo los nuevos .js
generados. El fichero <strong>config/initializers/assets.rb</strong> me quedó así; <strong>OJO</strong> que es
una linea bien larga:</p>

<pre><code class="ruby "assets.rb - ojo con la linea larga""># Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = '1.0'

# Add additional assets to the asset load path
# Rails.application.config.assets.paths &lt;&lt; Emoji.images_path

# Precompile additional assets.
# application.js, application.css, and all non-JS/CSS in app/assets folder are already added.
# Rails.application.config.assets.precompile += %w( search.js )

# compila todo lo que te encuentres por el camino
Rails.application.config.assets.precompile += Dir.glob(File.join(Rails.root.to_path,'app/assets/javascripts/*.j*')).map{|f| File.basename(f).split('.')[0..1].join('.')}

# activa el debug de la asset pipeline, solo en entorno de desarrollo
Rails.application.config.assets.debug = ENV['RAILS_ENV'] and ENV['RAILS_ENV'].include? 'development'
</code></pre>

<p>Podría hacer lo mismo con las CSS si usa un poquito la células grises. Note como
además, agregamos que se debugue la asset pipeline si y solo si estamos en
development.</p>

<p>Pero no hemos terminado, la vista lleva unos toques&hellip; pues debemos decirle lo
más importante, que cargue solo las .js de su controlador. A mi me quedó así:</p>

<p>  &lt;%= javascript_include_tag params[:controller] %></p>

<pre><code class="html "app/views/layouts/application.html.erb"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;El Título&lt;/title&gt;
  &lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;!-- carga solo las .js del controlador dado --&gt;
  &lt;%= javascript_include_tag params[:controller] %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;%= yield %&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Ahí te das cuenta que el que carga todo, es el manifest (application.js) con su
&ldquo;requiere_tree .&rdquo; pero la cláusula en la línea 8 le dice que cargue la .js del
controlador especificado en <strong>params[:controller]</strong></p>

<p>Bueno así debe pinchar con javascript y con CoffeScript, al menos a mi me pinchó
con ambos. Veamos que trae rails 5 con esto, porque la mejora urge&hellip;</p>

<p>Si la cosa sigue así en la versión 5, me estoy mudando para Volt</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[will_paginate]]></title>
    <link href="http://uranio-235.github.io/blog/2015/07/19/will-paginate/"/>
    <updated>2015-07-19T14:58:30-04:00</updated>
    <id>http://uranio-235.github.io/blog/2015/07/19/will-paginate</id>
    <content type="html"><![CDATA[<p>De siempre, en materia de web la paginación ha sido tremendo rollo. A mi en lo
personal no me gustan los paginadores; pienso que nadie los usa. Pero siempre
hay un cliente que pide con mucho fervor detallitos que consideran importantes.</p>

<p>Una de las cosas que me gusta de MongoMapper es que viene con un paginador
integrado, pero este no es el caso.</p>

<p>No entiendo porque carajo ActiveRecords, que se jacta (con razón) de ser la ORM
definitiva; no tiene un puñetero soporte nativo para la paginación. O porque
esta subestimada gema, llamada
<a href="https://github.com/mislav/will_paginate/">will_paginate</a> no viene incluida en
el Gemfile que trae RoR por defecto. Se harían un buen favor.</p>

<p>La cuestión es que will_paginate hace muy simple la tediosa tarea de paginar.</p>

<pre><code class="bash 'instalando will_paginate'">echo 'gem "will_paginate"' &gt;&gt; Gemfile
bundle update
</code></pre>

<p>Ahora veamos como se pagina un modelo. Tengamos el ejemplo típico, el
controlador &ldquo;User&rdquo; con los 1500 usuarios.</p>

<pre><code class="ruby "controlador del scaffold users"">  @users=User
  .all
  .paginate(:page =&gt; params[:page], :per_page =&gt; 15)
  .order('updated_at asc')
</code></pre>

<p>OJO! De la 3ra linea, te puedes tomar el atrevimiento de modificar el 15 y poner
el número que te de la gana; pero NO toques al símbolo :page y su valor. En este
caso, el 15 representa la cantidad de elementos que mostraremos por página.</p>

<p>Te digo que no toques el params[:page] porque will_paginate lo hace todo solo.
En la vista solo tienes que poner esto</p>

<pre><code class="erb "app/views/users/index.html.erb"">
   &lt;div class="text-center"&gt;
      &lt;%= will_paginate @users %&gt;
   &lt;/div&gt;
</code></pre>

<p>Finalmente queda algo de lo más discreto pero 100% funcional:</p>

<div class="text-center">
<div class="pagination">
<span class="previous_page disabled">&#8592; Anterior</span>
<em class="current">1</em>
<a rel="next" href="#">2</a> <a href="#">3</a>
<a href="#">4</a>
<a href="#">5</a>
<a href="#">6</a> <a href="#">7</a>
<a href="#">8</a> <a href="#">9</a>
<span class="gap">&hellip;</span>
<a href="#">28</a>
<a href="#">29</a>
<a class="next_page" rel="next" href="#">Próximo &#8594;</a>
</div></div>


<p>¡COOOOÑOóOOO! En español y todo. Por supuesto,  no es magia. Lo que pasa que el
que hizo la gema, la hizo con tremendo cariño y parece conocer muy bien la API
de ruby on rails; con lo cual tuvo muy en cuenta, la parte del i18n.</p>

<p>Ejecute lo siguiente:</p>

<pre><code class="bash "contenido de la gema"">gem cont will_paginate|grep en.yml
</code></pre>

<p>Guíate por ese fichero y añádele a tu locale la traducción relacionada con
will_paginate, en mi caso, quedo así:</p>

<pre><code class="yml "en.yml"">en:

  # el locales de will_paginate
  will_paginate:
    previous_label: "&amp;#8592; Anterior"
    next_label: "Próximo &amp;#8594;"
    page_gap: "&amp;hellip;"
</code></pre>

<p>¡¡A paginar se ha dicho!!</p>

<p>Thanks to <strong>Mislav Marohnić</strong> for you good job; developing will_paginate</p>

<p>Si te ha gustado will_paginate, escríbele un <a href="mailto:mislav.marohnic@gmail.com">correo al autor</a>
y muéstrale tu agradecimiento. Yo ya lo hize ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[date_select en español]]></title>
    <link href="http://uranio-235.github.io/blog/2015/07/12/date-select-en-espanol/"/>
    <updated>2015-07-12T15:14:12-04:00</updated>
    <id>http://uranio-235.github.io/blog/2015/07/12/date-select-en-espanol</id>
    <content type="html"><![CDATA[<p>Algunos componentes de <a href="http://rubyonrails.org/">Ruby on Rails</a>, se pueden usar
de manera independiente, como es el caso de
<a href="https://github.com/rails/rails/tree/master/activerecord">active_record</a> (sin
dudas es el más potente). Pero otro que no se queda atrás, es active_support.
Lleno de sorpresas y de joyas poco documentadas.</p>

<p>Para el que no lo conozca, en ruby on rails, hay un método muy cómodo que genera
un <a href="https://www.w3.org/wiki/HTML/Elements/select"><strong>select</strong></a> cuyas <em>option</em> son nada menos que la fecha. Los usuarios
mononeuronales, encuentran más cómodo introducir una fecha así, que con un
datepicker.</p>

<p>El método <a href="http://apidock.com/rails/ActionView/Helpers/DateHelper/select_date"><strong>select_date</strong></a> genera una cosa similar a esta:</p>

<p><select id="caudocidad_day" name="caudocidad[day]">
<option value="12" selected="selected">12</option>
</select>
<select id="caudocidad_month" name="caudocidad[month]">
<option value="8" selected="selected">Agosto</option>
</select>
<select id="caudocidad_year" name="caudocidad[year]">
<option value="2015" selected="selected">2015</option>
</select></p>

<p>Pero con todos los meses y sus días claro. Ahí soló te puse un pedazito. Para
generar esto, se supone que solo necesites poner algo como:</p>

<pre><code class="erb "select_date"">&lt;%= select_date Date.today, prefix: :caudocidad %&gt;
</code></pre>

<p>Luego en el controlador, generas la fecha, procesando el dato. Hay mil y una
forma de hacerlo. Más mágica y menos mágica, yo lo hago de una manera bien
rudimentaria:</p>

<pre><code class="ruby "Time.mktime en el controller"">@cuando=Time.mktime params[:caudocidad][:year],params[:caudocidad][:month],params[:caudocidad][:day]
</code></pre>

<p>Como vez, a <strong>prefix:</strong> se le mandó un símbolo, que pasó a ser el valor del HTML
generado, <strong>name=&ldquo;caudocidad&rdquo;</strong>. En mi caso, se llama &ldquo;cadocidad&rdquo; usted le pone
como le de la gana. Sería :prefix=>&lsquo;nombre_que_quieras&rsquo; o prefix: &lsquo;nombre&rsquo; en su
versión corta.</p>

<p>En el controlador, <strong>params[:caudocidad]</strong>, contiene un Hash, donde las claves
<strong>:year</strong>, <strong>:month</strong> y <strong>:day</strong> tendrán los valores numéricos listos para ser
procesados.</p>

<pre><code class="ruby params[:caudocidad]">{:year=&gt;2015, :month=&gt;8, :day=&gt;12}
</code></pre>

<p>Todo eso está muy bonito, pero lo jodido del caso, es que los meses vienen en
inglés.</p>

<p>Llevarlo a español, requiere estar un poco familiarizado con el
<a href="http://guides.rubyonrails.org/i18n.html">i18n</a> de Ruby on rails.</p>

<p>Para el que no lo conozca, el i18n, es un sistema que nos permite crear
aplicaciones en múltiples idiomas. De forma tal que nuestra aplicación le hable
al navegador en el idioma que este soporta. Lo malo del caso es que no lo hace
solo. Serás tu quien deba indicarle cuando usar que idioma. Una buena manera de
hacer eso, es parseando el encabezado &ldquo;content-&rdquo; para ver que idioma soporta el
navegador. Métodos hay miles, pero no se porque rails no lo hace solo.</p>

<p>Si nuestra aplicación fuera canadiense, le diría que cree un fichero para cada
idioma. Pero como nuestra aplicación es Cubana, con ponerlo todo en el
<strong>en.yml</strong> resolvemos el problema.</p>

<p>Al principio me fajaba con el <strong>en.yml</strong> y trataba de ponerle cosas, pero luego
descubrí que hay una especie de esqueleto en la gema de active_support.</p>

<p>En vez de escribir un en.yml desde cero, podemos usar el que está en
active_support. Ejecuta este comando:</p>

<pre><code class="bash "buscando el en.yml""> gem  cont activesupport|grep en.yml
</code></pre>

<p>Copia dicho fichero a tu <strong>config/locales/en.yml</strong> y comencemos a editarlo.</p>

<p>En la linea 30 y pico. Hay una cláusula llamada <strong>month_names</strong>, ahí le pones
los meses. A mi me quedó así:</p>

<pre><code class="ruby "month_names, cerca de la linea 30"">
    # Don't forget the nil at the beginning; there's no such thing as a 0th month
    month_names: [~, Enero, Febrero, Marzo, Abril, Mayo, Junio, Julio, Agosto, Septiembre, Octubre, Novimebre, Diciembre]
    abbr_month_names: [~, Ene, Feb, Mar, Abr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec]
</code></pre>

<p>Además, más abajo, por la linea 40, tienes el orden en el que se muestra la
fecha.</p>

<pre><code class="ruby "order: bajo la linea 40"">    # Used in date_select and datetime_select.
    order:
      - day
      - month
      - year
</code></pre>

<p>A mi me quedó así, porque los yumas ponen el mes delante y el día detrás.</p>

<p>Si miras más abajo, verás que tiene incluso la moneda (currency) y los
separadores, por ejemplo, usar coma en vez de punto para separar los decimales.
También están los numerales (millones, millares, centenas, etc&hellip;)</p>

<p>Hay un método muy curioso que yo uso mucho. Convierte un array en una oración
delimitada por coma; pero pone una conjunción &ldquo;y&rdquo; en el último elemento.</p>

<pre><code class="ruby 'to_sentence'">irb(main):&gt; %w[perros gatos].to_sentence
=&gt; "perros y gatos"

irb(main):&gt; %w[papas malangas calabazas].to_sentence
=&gt; "papas, malangas y calabazas"
</code></pre>

<p>El separador se configura ahí también. Por defecto dice &ldquo;<strong>and</strong>&rdquo; en vez de &ldquo;<strong>y</strong>&rdquo;</p>

<p>Conclusión:</p>

<p>La instrumentación de active_support (ese nombre tan suigeneris se lo pusieron
ellos) es bastante rica. Deberían verla bien de cerca. La guia es bastante
escueta; te recomiendo que mires un poco el código fuente de active_support o la
documentación de la API (que es casi lo mismo).</p>

<p>Si buscas en la misma ruta, pero con <em>model</em> donde dice <em>support</em> verás el YAML
que utiliza ActiveRecord para generar los errores de validación. Ahí puedes
ponerlos a tu manera. Osea, el contenido de ese YAML se lo adicionas al tuyo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[añadir verbo a un scaffold]]></title>
    <link href="http://uranio-235.github.io/blog/2015/07/05/anadir-verbo-a-un-scaffold/"/>
    <updated>2015-07-05T21:35:54-04:00</updated>
    <id>http://uranio-235.github.io/blog/2015/07/05/anadir-verbo-a-un-scaffold</id>
    <content type="html"><![CDATA[<p>Cualquiera que sepa como usar debidamente los scaffolds, o sea, cualquiera que
sepa como hacerle la paja a ruby on rails para que haga lo que queremos; seguro
habrá intentado en algún momento, añadir un nuevo método a un scaffold. Además,
de seguro quisiste luego poder llamarlo con los métodos &ldquo;metodo_user_path&rdquo; y que
la ruta se cree de manera automática.</p>

<p>Por ejemplo, en este caso, tengo el scaffold <strong>user</strong> y le agregué el método
<strong>cambiar</strong> aparte de los clásicos PUT y DELETE.</p>

<pre><code class="ruby "scope de users_controller.rb"">
  # cambia el estado de habilitación del usuarios
  def cambiar
     @user.enabled=!@user.enabled
     @user.save
     redirect_to :back
  end

  # GET /users
  def index
    @users = User.all
  end
</code></pre>

<p>Pero el método cambiar no aparece en rails hasta que no hagas lo siguiente en el
fichero de las rutas.</p>

<pre><code class="ruby "config/routes.rb"">
   # el scaffold de los usuarios
   resources :users do

      # agregamos el verbo cambiar usado para
      # @user.enabled=!@user.enabled
      # para que exista: cambiar_user_path
      member do 
         get 'cambiar'
      end

   end
</code></pre>

<p>Ahora existirá el método <strong>cambiar_user_path</strong> que toma como argumento el
usuario.</p>

<p>   cambiar_user_path(user)</p>

<p>De esta manera, se le manda el objeto usuario y genera una URL como</p>

<p>   /users/345/cambiar</p>

<p>Dicha ruta macheará el método User#cambiar</p>
]]></content>
  </entry>
  
</feed>
