<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: destacado | El SysAdmin del 3er Mundo]]></title>
  <link href="http://uranio-235.github.io/blog/categories/destacado/atom.xml" rel="self"/>
  <link href="http://uranio-235.github.io/"/>
  <updated>2017-07-06T13:22:34-04:00</updated>
  <id>http://uranio-235.github.io/</id>
  <author>
    <name><![CDATA[låzaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[repos EPEL y demás]]></title>
    <link href="http://uranio-235.github.io/blog/2017/06/29/repos-epel-y-demas/"/>
    <updated>2017-06-29T02:15:03-04:00</updated>
    <id>http://uranio-235.github.io/blog/2017/06/29/repos-epel-y-demas</id>
    <content type="html"><![CDATA[<p>CentOS, es conocido por sus reducidos repositorios. Pero por suerte, los repos
EPEL (enterprise linux) y el IUS nos permiten bandearnos un poco. Además,
tenemos el Remi, tan fresco como explosivo, que si bien no es muy recomendable
usarlo, nunca está de más tenerlo a mano. Si algo tiene lindo <em>yum</em> es la
gestión de repositorios.</p>

<p>Instala <strong>wget</strong>&hellip; vamos a necesitarlo.</p>

<p>Para los criticones: -sí, ya se que el epel está en el repo oficial, pero para
este ejemplo lo añadiremos desde la web.</p>

<pre><code class="console "añadiendo el EPEL""> wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
 rpm -Uvh epel-release-latest-7*.rpm
</code></pre>

<p>El IUS es majomenos la misma historia</p>

<pre><code class="console "añadiendo el IUS"> wget https://centos7.iuscommunity.org/ius-release.rpm
 rpm -Uvh ius-release*.rpm
</code></pre>

<p>El repo IUS, suele contener paquetes más recientes de cosas que ya centos trae.
La mejor manera de instalar esto, es usando un plugin de yum, llamado «replace»,
así que instala el paquete <strong>yum-plugin-replace</strong>.</p>

<p>Ahora busca el paquete que deseeas en el repo IUS:</p>

<pre><code class="console "buscando en el IUS""> yum --disablerepo="*" --enablerepo="ius" search talcosa
</code></pre>

<p>Luego remplaza el paquete <em>talcosa</em> de CentOS, por el <em>talcosa3u</em> de IUS</p>

<pre><code class="console "remplazando paquete""> yum replace talcosa --replace-with talcosa3u
</code></pre>

<p>Para más detalles, échale un vistazo a <a href="https://ius.io/Usage/">el user-guide de IUS</a></p>

<p>El repositorio Remi es aún más peligroso, ya que los paquetes tienen el mismo
nombre que el de los oficiales. Se recomienda no tener el repo remi activado NI
JUGANDO.</p>

<p>La instalación es la misma rutina</p>

<pre><code class="console "instalando Remi""> wget http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
 rpm -Uvh remi-release-7*.rpm
</code></pre>

<p>Otro repo bueno, es el de alcancelibre, que provee sarg.</p>

<pre><code class="console "alcancelibre"">wget -N http://www.alcancelibre.org/al/server/AL-Server.repo \
-O /etc/yum.repos.d/AL-Server.repo
</code></pre>

<p>Luego usamos el mismo proceder, buscar en repo específico.</p>

<pre><code class="console "buscando paquetes"">yum --enablerepo=remi search fulanito
yum --enablerepo=remi install fulanito
</code></pre>

<p>El comando <em>repolist</em> permite ver los repositorios en juego. Para ver los repos
que tienes acoplados, usa <strong>yum repolist</strong>. Si quieres ver que repo tienes
deshabilitados, usa <strong>yum repolist disabled</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[instalar node rápido]]></title>
    <link href="http://uranio-235.github.io/blog/2017/05/13/instalar-node-rapido/"/>
    <updated>2017-05-13T17:13:53-04:00</updated>
    <id>http://uranio-235.github.io/blog/2017/05/13/instalar-node-rapido</id>
    <content type="html"><![CDATA[<p>Desde que surgió node, estaba deseando que hubiera una herramienta como RVM para
instalar nodejs. Resulta que la hay!!! Al igual que RVM, requiere cURL. Por
cierto, se llama <strong>n</strong></p>

<pre><code class="console "> curl -o /usr/local/bin/n https://raw.githubusercontent.com/visionmedia/n/master/bin/n
 chmod +x /usr/local/bin/n
 n lts
</code></pre>

<p>Instala hasta npm!</p>

<p><strong>En debian</strong>, otra manera de hacer esto, es usando el repo oficial que provee node:</p>

<pre><code class="console"> curl -sL https://deb.nodesource.com/setup | bash -
 aptitude update
 aptitude install nodejs
</code></pre>

<p>Acuérdate que algunos paquetes (por no decir que los más usados) requieren
compilar librerías. Así que no olvides instalar <strong>build-essential</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[autoridad certificadora]]></title>
    <link href="http://uranio-235.github.io/blog/2017/05/10/ssl-ca-local/"/>
    <updated>2017-05-10T19:39:19-04:00</updated>
    <id>http://uranio-235.github.io/blog/2017/05/10/ssl-ca-local</id>
    <content type="html"><![CDATA[<p>Es un gran mojón tener que generar un certificado para cada servicio. Y aquí, en
el 5to infierno de infomed usar cualquier proveedor de CA gratis (como let&rsquo;s
encrypt) es por gusto.</p>

<p>En estos caso, no queda otro remiendo que usar un CA firmado localmente. La idea
es.</p>

<p>Generamos un par de claves que harán la función de &ldquo;autoridad certificadora&rdquo;</p>

<ul>
<li> crear un Clave Privada (.key) y mantenerla bien escondida</li>
<li> crear la Clave Pública del anterior (.pem) y la distribuimos</li>
</ul>


<p>Una vez que tengamos nuestra autoridad certificadora. Empezamos a generar
certificados y lo firmamos con esta.</p>

<ul>
<li> generamos una clave privada (el .key para este certificado)</li>
<li> hacer una solicitud de certificado (.csr) al .key anterior</li>
<li> generamos el dichoso certificado</li>
<li> firmamos el certificado usando el .key de la CA</li>
</ul>


<p>Usaremos al tan legalmente controversial OpenSSL para esta tarea.</p>

<p>La clave (.key) del CA, debe crearse en una máquina desconectada de la red y
preferiblemente sepultada a 3 metros bajo tierra. Si esto le parece demasiado
paranoico, entonces mantenga el &ldquo;.key&rdquo; en el servidor más aislado de la red.
Preferiblemente, aquel que parezca menos importante y lejos de internet. En mi
caso, yo uso mi laptop personal para tareas administrativas y es ahí donde tengo
todas las claves privadas.</p>

<p>Supón que lo hagas en un servidor determinado. Creamos entonces en el home del
root, un espacio adecuado para esto.</p>

<pre><code class="console "creando el directorio""> mkdir -m700 CA
 cd CA
 unmask 077
</code></pre>

<p>Creamos la super-secretísima clave privada, que hará la función de CA:</p>

<p><strong>openssl genrsa -out rootCA.key 2048</strong></p>

<pre><code class="console "creando el .key en la máquina secreta""> [lazaro@artema CA]$ openssl genrsa -out rootCA.key 2048
 Generating RSA private key, 2048 bit long modulus
 ..............................+++
 .......................................................+++
 e is 65537 (0x010001)
</code></pre>

<p>Ya tenemos la piedra angular de nuestro CA; pero así no sirve. Esa es la clave
primaria, o sea, la que tiene la facultad de descifrar y derivar nuevos
certificados. No nos conviene que nuestros &ldquo;usuarios finales&rdquo;, o lo servidores,
usen esta clave. Necesitamos crear una &ldquo;clave pública&rdquo;, esta clave pública se
deriva de la privada, pero solo tiene la facultad de cifrar, así la puede tener
cualquiera y mandarnos datos cifrados. Sin embargo, <strong>NO</strong> se puede usar la clave
pública para DEScifrar. Al menos no; usando tecnología civil.</p>

<p>Nota para los imbéciles: El <strong>rootCA.key</strong> no se le puede dar a nadie.</p>

<p><strong>openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.pem</strong></p>

<pre><code class="console "creando la clave pública""> [lazaro@artema CA]$  openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.pem
 You are about to be asked to enter information that will be incorporated
 into your certificate request.
 What you are about to enter is what is called a Distinguished Name or a DN.
 There are quite a few fields but you can leave some blank
 For some fields there will be a default value,
 If you enter '.', the field will be left blank.
 -----
 Country Name (2 letter code) [AU]:CU
 State or Province Name (full name) [Some-State]:Havana
 Locality Name (eg, city) []:Plaza
 Organization Name (eg, company) [Internet Widgits Pty Ltd]:Calixto Garcia
 Organizational Unit Name (eg, section) []:Calixto Garcia
 Common Name (e.g. server FQDN or YOUR name) []:Hospital Calixto Garcia
 Email Address []:ssl@hcg.sld.cu
</code></pre>

<p>Ya tenemos la clave pública (el &ldquo;.pem&rdquo;). Este fichero será distribuido a
nuestros clientes para que puedan hacer dos cosas: Cosa 1, cifrar los datos, sin
poder descifrarlos. Cosa 2, identificar a la autoridad certificadora.</p>

<pre><code class="console "la clave privada y publica de nuestra CA""> [lazaro@artema CA]$ ls
 rootCA.key  rootCA.pem
</code></pre>

<p>Nota para los imbéciles: El <strong>rootCA.pem</strong> se instalará en los clientes,
navegadores, teléfonos, etc&hellip;</p>

<p>Note además, que hemos dado a nuestra clave pública, 10 años antes de su
caducidad (-days 3650). Quizás quieras darle un solo.</p>

<p><img class="left" src="/images/Enigma.jpg" title="&ldquo;Enigma, un disposotivo criptográfico de cuando no existía SSL.&rdquo;" ></p>

<p>Ya puedes hacer público el &ldquo;.pem&rdquo; para que todo el que sepa que hacer con este,
se lo instale. Por ejemplo, si tienes una intranet local, podrías dejarla con
http plano y brindar información (así como la descarga) sobre el dicha clave.
Puedes crear una página de HTML plano explicando porque SSL y como instalarlo
en los navegadores. Ahí dices además, que se debe iniciar la conexión usando el
prefijo &ldquo;https&rdquo;. Podrías poner esa página como el destino de redirección
para todos los virtualhsot que usen &ldquo;http&rdquo; y así hacer conciencia a los
usuarios. Por ejemplo, en servidores con información sensible (como los
webmails), solo debe ser alcanzado usando ssl.</p>

<p>Pero <strong>sin extremismos</strong>. Una intranet que brinda información pública, no tiene
que ser obligado por SSL (a menos que sea un wordpress con login).</p>

<p>Por cierto, Firefox tiene su propio almacén de certificados. Dirígete a
Configuraciones, Avanzada, Certificados.</p>

<p><img class="right" src="/images/localCA1.png" title="&ldquo;localizando el almacén de certificados&rdquo;" ></p>

<p>Una vez ahí, ve a donde dice <strong>Autoridades</strong> (no a tus certificados) y procede a
importar el certificado.</p>

<p><img class="right" src="/images/localCA2.png" title="&ldquo;importando el certificado a firefox&rdquo;" ></p>

<p>En android también es tremenda balasera instalar el &ldquo;.pem&rdquo; y no dejará de
meterme miedo diciendo que &ldquo;un tercero podría estar manipulando tu información&rdquo;.
Lo cual no deja de ser cierto, poner un SSLbumper a squid bataría para hacer
horrores.</p>

<p><img class="right" src="/images/localCA3.png" width="300" height="400" title="&ldquo;instalando el .pem en android&rdquo;" ></p>

<p>Llégate a la configuración de seguridad y verás una opción que dice &ldquo;instalar
certificados desde la tarjetaSD&rdquo; o &ldquo;desde el almacenamiento&rdquo;.</p>

<p>En algunos android 4, si te pide una clave y no sabes cual es, debes configurar
el acceso al teléfono mediante clave. O sea, quita el patrón, pon una clave y
prueba importar el &ldquo;.pem&rdquo;. Al pedir la clave pones la que estableciste para
entrar. Una vez importado el certificado, vuelves a poner el mecanismo de
seguridad que deses (patrón, ninguno, etc&hellip;)</p>

<h3>de vuelta al servidor secreto</h3>

<p>Pasemos ahora a crear uno (o varios) certificados para nuestros servidores.
Para empezar, crearemos el certificado del servidor de correo, pero no del
smtp, si no del webmail.</p>

<p><strong>MUY IMPORTANTE</strong> en los certificados, el CN (Common Name) no puede ser el que
te de la gana a tí. Si por ejemplo tu servidor de correo está en
webmail.dominio.cu, ese ha de ser su CN</p>

<p>Nota para los imbéciles: Creas un certificado para cada servicio y su CN será el
mismo nombre del virtualhost.</p>

<p>Creamos una clave privada para este servidor (para que pueda cifrar, te requiero
que es bilateral y simétrico).</p>

<p><strong>openssl genrsa -out webmail.key 2048</strong></p>

<pre><code class="console "la clave privada del webmail""> [lazaro@artema CA]$ openssl genrsa -out webmail.key 2048
 Generating RSA private key, 2048 bit long modulus
 .+++
 ......................................................................................+++
 e is 65537 (0x010001)
</code></pre>

<p>Le pedimos a esta clave que genera un certificado (certificate request).</p>

<p><strong>openssl req -new -key webmail.key -out webmail.csr</strong></p>

<pre><code class="console "solicitud de certificado""> [lazaro@artema CA]$ openssl req -new -key webmail.key -out webmail.csr
 You are about to be asked to enter information that will be incorporated
 into your certificate request.
 What you are about to enter is what is called a Distinguished Name or a DN.
 There are quite a few fields but you can leave some blank
 For some fields there will be a default value,
 If you enter '.', the field will be left blank.
 -----
 Country Name (2 letter code) [AU]:CU
 State or Province Name (full name) [Some-State]:Havana
 Locality Name (eg, city) []:Plaza
 Organization Name (eg, company) [Internet Widgits Pty Ltd]:Calixto Garcia
 Organizational Unit Name (eg, section) []:Calixto Garcia
 Common Name (e.g. server FQDN or YOUR name) []:webmail.hcg.sld.cu
 Email Address []:ssl@hcg.sld.cu

 Please enter the following 'extra' attributes
 to be sent with your certificate request
 A challenge password []:
 An optional company name []:
</code></pre>

<p>Ya tenemos las dos máquinas enigmas listas, pero no están sincronizadas y por
ende, los cifrados producidos producidos por estos dos ficheros, serán
simétricos pero no bilaterales. Alguien debe decirle que son padre e hijo.</p>

<p>Eso lo haremos, firmando con nuestro CA, el certificado generado.</p>

<p><strong>openssl x509 -req -in webmail.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out webmail.crt -days 3650 -sha256</strong></p>

<pre><code class="console "firmando el certificado con la CA"">[lazaro@artema CA]$ openssl x509 -req -in webmail.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out webmail.crt -days 3650 -sha256
Signature ok
subject=C = CU, ST = Havana, L = Plaza, O = Calixto Garcia, OU = Calixto Garcia, CN = webmail.hcg.sld.cu, emailAddress = ssl@hcg.sld.cu
Getting CA Private Key
</code></pre>

<p>Note como hacemos uso de las claves pública y privada del CA. Por tanto, si un
atacante adquiere los certificados del webmail y los colocase en otro sitio,
este no machea el CN webmail.hcg.sld.cu y desata una advertencia en el navegador
de nuestros usuarios. Además, no podrá firmar el certificado para modificarlo e
incluir su CN.</p>

<pre><code class="console "los certificados del webmail"">[lazaro@artema CA]$ ls
rootCA.key  rootCA.pem  rootCA.srl  webmail.crt  webmail.csr  webmail.key
</code></pre>

<p>Bueno, todo listo, hagamos un paquete con todo lo necesario para que nuestro
servidor de correo se lo configure en el webmail. Para postfix y para dovecot,
debemos hacer otro que machee smtp.hcg.sld.cu y pop3.hcg.sld.cu sucesivamete.</p>

<p><strong>REPITO!</strong> el rootCA<strong>.key</strong> <strong>NO</strong> puede hacerse público. Así que le daremos
una copia del rootCA<strong>.pem</strong></p>

<pre><code class="console "empaquetando la entrega""> [lazaro@artema CA]$ mkdir webmail
 [lazaro@artema CA]$ mv webmail.* webmail/
 [lazaro@artema CA]$ cp rootCA.pem webmail/
 [lazaro@artema CA]$ tar cvfz webmail.tar.gz webmail/
 webmail/
 webmail/webmail.crt
 webmail/webmail.csr
 webmail/webmail.key
 webmail/rootCA.pem
 [lazaro@artema CA]$ scp webmail.tar.gz root@webmail.hcg.sld.cu:/root/
</code></pre>

<p>Instálale esos certificado a tu
<a href="http://lmgtfy.com/?q=apache+ssl+howto">apache</a>/<a href="http://lmgtfy.com/?q=nginx+ssl+howto">nginx</a>
y todo el que tenga el <strong>rootCA.pem</strong> instalado en su dispositivo; verá a
&ldquo;Calixto Garcia&rdquo; como una legítima autoridad certificadora al abrir el webmail.</p>

<p>Lo que si no me queda claro es como se le instala el &ldquo;.pem&rdquo; a Windows. ¿Sugerencias?</p>

<p><img class="center" src="/images/localCA4.png" width="200" height="300" title="&ldquo;autoridad certificadora, o al menos, eso dicen&rdquo;" ></p>

<p>Aquí les dejo <a href="https://gist.github.com/acf09c97f0bf27a18f0be9e757df1f80">el script que uso</a> para hacer esto de forma automatizada. Para correrlo cree un directorio. Por ejemplo:</p>

<pre><code class="console "CA""> mkdir miCA
 cd miCA
 mkcert.sh
</code></pre>

<p>Al correrlo la primera vez te creara el <strong>rootCA.pem</strong>, luego al correrlo con
argumentos, se generan certificados para dichos dominios.</p>

<pre><code class="console "CA""> mkcert.sh fulanito.dominio.cu
 ...
 echo fulanito.dominio.cu.tar.gz está listo para despachar
</code></pre>

<p>Te devolverá un .tar.gz con todo dentro.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[portknocking en freebsd]]></title>
    <link href="http://uranio-235.github.io/blog/2017/03/01/portknocking-en-freebsd/"/>
    <updated>2017-03-01T23:53:01-05:00</updated>
    <id>http://uranio-235.github.io/blog/2017/03/01/portknocking-en-freebsd</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/alibaba.jpg" width="400" height="500" title="" ></p>

<p>La técnica port-knocking o knockd para otros, es en mi opinión, <strong>pilar de la
seguridad</strong> en cualquier servidor que use SSH. Aunque es bastante versátil y
puede ser usado hasta para reiniciar servicios sin loguearte.</p>

<p>Una de las cosas que empece a extrañar en FreeBSD fue knockd, pero gracias a la
flexbilidad de ipfw, podemos usar este poderoso software. En FreeBSD el fichero
se encuentra en <strong>/usr/local/etc/knockd.conf.sample</strong> y el paquete se llama
<strong>knock</strong>.</p>

<p>OJO!! Muy importante especificarle la interfaz por la cual va a escuchar.</p>

<pre><code class="ini "/usr/local/etc/knockd.conf""> [options]
         logfile = /var/log/knockd.log
         interface = xn0

 [openSSH]
         sequence    = 111,222,333
         seq_timeout = 9
         command     = /sbin/ipfw -q add 00001 allow all from %IP% to me
         tcpflags    = syn

 [closeSSH]
         sequence    = 222,111,333
         seq_timeout = 9
         command     = /sbin/ipfw -q delete 00001
         tcpflags    = syn
</code></pre>

<p>Nada, resumiendo, que el truco está en poner la regla con el número 00001.
Recuerdas que ipfw te permite (casi te obliga a) especificar un número para cada
regla. Pues usaremos ese numerito diminuto para ponerla de primera.</p>

<p>Los tipos ortodoxos criticarán que es una regla <em>al tetón</em>. Pienso que no vale
la pena abrir solo el 22; si voy a pasar tanto trabajo, que se me abra la puerta
completa.</p>

<p>Por cierto, junto con knock, viene un programita para hacer el knocking. Yo
solía hacerlo con netcat pero knock es más cómodo.</p>

<pre><code class="console "knock"">   knock 192.168.3.1 111,222,333
</code></pre>

<p>En mi <strong>.bashrc</strong>, tengo esta función declarada.</p>

<pre><code class="bash ".bashrc""> abrete_cesamo() {
    knock  $1 111 222 333
    ssh root@$1
    knock  $1 222 111 333
 }
</code></pre>

<p>No tengo que decirte que la combinación de puertos está de acorde al ejemplo de
la entrada y que debes cambiarla por la que tu establezcas. Así de esa manera,
hacerle SSH a un servidor es ejecutar <strong>abrete_cesamo ip.del.servidor</strong> Luego al
terminar la sesión ssh, se ejecuta la secuencia de cerrado.</p>

<p>Y hablando de implementaciones raras de knockd!</p>

<p>En alpine linux, iptables está en <strong>/sbin</strong>, no en /usr/sbin. Sin
embargo, el fichero de configuración tiene puesto que está en /usr/sbin/, lo
cual, repito; no es correcto.</p>

<p>Además, tanto en debian como alpine. No importa que pongas en la configuración
porque interfaz escuchará. Siempre lo hará por eth0. Para cambiar esta
situación; debes:</p>

<p>En <strong>alpine</strong> linux, configurar la interfaz en el fichero <strong>/etc/conf.d/knockd</strong></p>

<p>En <strong>debian</strong>, configurar la interfaz (y poner un 1) en <strong>/etc/default/knockd</strong></p>

<p>Recuerda que en linux, el comando de iptables, viene con &ldquo;-A INPUT&rdquo;. Si tienes
un firewall corriendo, obviamente que no pincha; por tanto, ponlo con &ldquo;-I
INPUT&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipfw simple y conciso]]></title>
    <link href="http://uranio-235.github.io/blog/2017/02/01/ipfw-simple-y-consiso/"/>
    <updated>2017-02-01T23:15:47-05:00</updated>
    <id>http://uranio-235.github.io/blog/2017/02/01/ipfw-simple-y-consiso</id>
    <content type="html"><![CDATA[<p>Las instrucciones para hacer un cortafuegos realmente <strong>SIMPLE</strong> y la vez
funcional (statefull firewall) con ipfw; sensillamente <em>&ldquo;no existen&rdquo;</em>, al menos
No de manera oficial. El cortafuegos ejemplificado en el handbook es bastante
ortodoxo y no muestra la flexibilidad de ipfw.</p>

<p>Para empezar, el módulo debe ser cargado en el kernel, así que inicializaremos
ipfw como si fuera un demonio más del sistema. Esto quiere decir que lo
añadiremos al <strong>/etc/rc.conf</strong></p>

<pre><code class="bash "/etc/rc.conf""> firewall_enable="YES"
 firewall_type="/usr/local/etc/ipfw.rules"
</code></pre>

<p>Te recomiendo reiniciar ahora; para que todo se cargue correctamente.</p>

<p>La <a href="https://www.freebsd.org/doc/handbook/firewalls-ipfw.html">documentación oficial</a> aclara que
los firewall pueden ser (además) del tipo: open, client, simple, closed o
UNKNOWN. Sin embargo, <strong>en mi opinión</strong> estas configuraciones prefabricadas, no
son suficiente para un servidor (por ejemplo proxy).</p>

<p>Para mantener la armonía chea y anticuada de freebsd; colocamos el cortafuegos
en el etc/ que está bajo /usr/local/. Ten en cuenta que casi todas las
aplicaciones que instales, tendrán su /etc ahí.</p>

<p>Reiniciar ipfw no es tan jamón como un usuario de iptables haría. Hacer un flush
de las reglas, significa quedarse trancado y perder la conexión por ssh. Para
reiniciar el cortafuegos, deberás tener un script que haga flush y además,
reiniciar el servicio. Este scriptsito me lo hice para la faena de toquetear el
cortafuegos</p>

<pre><code class="bash "/usr/local/bin/reiniciar_ipfw.sh""> #!/bin/csh
 service ipfw stop
 ipfw -q flush
 service ipfw start
 ipfw show
</code></pre>

<p>La documentación oficial (y otras muchas) indican que cada regla se cree
enumerada y que bebes mantener esta numeración manualmente. Sin embargo, esto no
es estrictamente necesario. Cada regla incrementará el número de manera
implícita.</p>

<p>La mecánica de ipfw es más sencilla que cualquier firewall de linux en mi
opinión.</p>

<p><strong>ipfw add accion argumento</strong></p>

<p>Si ya conoces <strong>ufw</strong>, te darás cuenta de que es una copia bastante mala de
ipfw, sobre todo; teniendo cuenta que ipfw es un firewall en sí, mientras que
ufw, es un stack que genera instrucciones de iptables.</p>

<p>Algo de lo que linux se ha alejado mucho es el teorema de KISS, pero en BSD, que
es unix ortodoxo, mantiene la simpleza como pilar. De esta manera, una acción
allow, en su forma más simple, es casi lenguaje natural.</p>

<p><strong>ipfw add allow all from 10.99 to me</strong></p>

<p>O sea, permite todo lo que venga de 10.0.0.1 para mi. Pero podemos hacer algo
más discriminatorio.</p>

<p><strong>ipfw add allow tcp from 10.0.0.99 to 10.0.0.1 dst-port 22 in via xn0</strong></p>

<p>Permite el tráfico tcp de 10.99 para 10.1 que valla para el puerto 22 en sentido
entrante (in) por la interfaz (via) xn0</p>

<p>¿Te la llevaste? Jamón de pollo! ¿Verdad?</p>

<p>Veamos pues un <strong>ipfw.rules</strong> bien básico. La interfaz <strong>lo0</strong> (lo con un cero)
es el localhost. La interfaz xn0 es la WAN y xn1 es la LAN.</p>

<pre><code class="bash "ipfw.rules""> # lo permitimos todo pa afuera
 ipfw -q add allow all from any to any out keep-state

 # permite todo por el localhost
 ipfw -q add allow all from any to any via lo0

 # las conexiones que ya estén iniciadas, pásalas
 # compara eso con el de iptables
 ipfw -q add allow tcp from any to any established

 # permite que te hagan ping desde la LAN 
 # pero no mucho icmp para que no hagan flood
 ipfw pipe 1 config bw 30KBytes
 ipfw -q add pipe 1 icmp from 192.168.1.0/24 to me in via xn1
 ipfw -q add allow  icmp from 192.168.1.0/24 to me in via xn1

 # permite que accedan al proxy desde la LAN
 ipfw -q add allow tcp from 192.168.1.0/24 to me 3128 via xn1

 # permite el servidor web pero solo deade la WAN
 # en este caso "me" será la ip de la WAN
 ipfw -q add allow tcp from any to me dst-port 80 via xn0

 # descarta el resto de los paquetes ENTRANTES
 # esta regla casi nunca es necesaria, ya que
 # suele ser implícita, o sea, drop por defecto
 ipfw -q add drop all from any to any
</code></pre>

<p>Veamos algunas características de este cortafuegos&hellip;</p>

<p>Como ven, no arranca haciendo flush como los de iptables. De hecho, hacer flush
como primera linea puede causarte problemas muy serios. Por otro parte,
reiniciar el cortafuegos sin hacer flush, provoca que se dupliquen las reglas.</p>

<p>La salida, por definición, está bloqueada. La última regla; autoriza la salida
del tráfico. ¿Por qué la última? ¿Por qué no al principio? Pues por si hacemos
un pipe de salida. Aveces regular el ancho de banda de salida, es más útil que
regular el de entrada. Por ejemplo, si queremos moderar la cantidad de tráfico
que un servidor web exporta. Más adelante veremos dummynet y los pipe.</p>

<p>En iptables, hacemos DROP cuando queremos desechar paquetes. En ipfw usamos
<strong>deny</strong>, aunque también puedes usar <strong>drop</strong> que es sinónimo de deny. El
cortafuego lo sustituirá por deny. Lo puedes ver al usar: ipfw show</p>

<p>Note que &ldquo;<strong>from me</strong>&rdquo; para ipfw, significa un paquete que provenga de cualquiera de
las ip que tiene configurada el servidor. En este caso, la interfaz xn0 debe
tener alguna de la red 192.168.1.0/24 así que <strong>me</strong> será dicha ip.</p>

<p>Una característica de ipfw <strong>bien peligrosa</strong> es que tiene muchas cosas
<strong>implícitas</strong>. Como lo de la numeración. Cuando digo implícita me refrito a que
si no las pones, ipfw las asume. Fíjate bien como se maneja el tema de los
puertos en la siguientes reglas.</p>

<pre><code class="bash "ipfw dst-port""> # permite que accedan al proxy desde la LAN
 ipfw -q add allow tcp from 192.168.1.0/24 to me 3128 via xn1

 # permite el servidor web pero solo deade la WAN
 # en este caso "me" será la ip de la WAN
 ipfw -q add allow tcp from any to me dst-port 80 via xn0
</code></pre>

<p>En la primera regla, declaramos &ldquo;<strong>me 3128</strong>&rdquo;, esto significa &ldquo;para mi ip por el
puerto 3128&rdquo;. Realmente ipfw lo reescribe (puedes verlo con &ldquo;show&rdquo;) y pondrá la
cláusula <strong>dst-port</strong> al igual que la siguiente linea, detrás de <strong>me</strong> viene la
cláusula <strong>dst-port</strong> seguida por el puerto. Pero si no la pones, se asume como
implícita. En poca palabras:</p>

<p>&ldquo;to me 3128&rdquo; y &ldquo;to me dst-port 3128&rdquo; es exactamente lo mismo.</p>

<p>Otro tema que le retraquetea el mango; es la gestión del ancho de vianda. Porque
tc de iproute (en linux) es un asco. Pero si conocemos ipfw, sabremos que maneja
el ancho de vianda de una menera muy peculiar; usando un módulo llamado
dummynet. No esperes ver la palabra &ldquo;dummynet&rdquo; escrita en el cortafuegos. En
fin; analiza este ejemplo:</p>

<pre><code class="bash "ipfw y dummynet""> ipfw add pipe 1 ip from me to 192.168.1.0/24 out via xn0
 ipfw pipe 1 config bw 128KBytes
</code></pre>

<p>Se crea el pipe número 1, con un ancho de banda de 128 KyloBytes. En la regla de
arriba, se dijo que todo el tráfico de la interfaz xn0, proveniente de el
servidor hacia la red 192.168.1.0/24 y en sentido saliente; será a 128K. O sea,
modificamos el ancho de banda <strong>que sale</strong> del servidor, lo cual es bastante
útil para un servidor web o ftp.</p>

<p>En el caso de un servidor proxy, no vale la pena modificar el ancho de banda de
<strong>salida</strong>, ya que las páginas son enviadas al cliente una vez bajadas y si ya
nos hicimos el arakiri de bajarla: ¿Pa que demorarlas más? Para un servidor
proxy usamos una regla bidireccional. O sea, creamos el pipe 1 y el pipe 2 con
igual o diferente ancho de banda y aplicamos una regla pa afuera y otra pa
adentro.</p>

<p>Tenga en cuenta que el las conexiones HDSL tiene más ancho de vianda pa abajo
que pa arriba. Osea, que salida a la WAN (el router) debe ser más estrecha que
salida a la LAN.</p>

<p>En un servidor de correo sí sería útil regular la entrada, ya que hay gente que
manda elefantes por el puerto 25. Sobre todo en redes conmutadas o muy lentas.
También sería útil moderar la entrada en un servidor que involucre subida de
ficheros, por ejemplo, una nube, un servidor de carpetas compartidas.</p>

<p>Ah! por cierto:</p>

<p>Si crearas un pipe y le dijeras que 3 ip, lo usan, el ancho de vianda sería
compartido para esas 3 ip. O sea</p>

<pre><code class="bash "ipfw y dummynet""> ipfw add pipe 1 ip from me to 192.168.1.10/24 out via xn0
 ipfw add pipe 1 ip from me to 192.168.1.11/24 out via xn0
 ipfw add pipe 1 ip from me to 192.168.1.12/24 out via xn0
 ipfw pipe 1 config bw 128KBytes
</code></pre>

<p>En este caso, 10, 11 y 12, tienen un total de 128KB/s, si 10 acapara todo el
ancho de banda (los 128) entonces 11 y 12 tendrán unos bellos timeout como
respuesta. Piensa en todo lo que puedes hacer con eso.</p>

<p><strong>OJO CON EL ÓRDEN!!!</strong></p>

<p>Esa regla machea <strong>la salida</strong>. Si la colocaras <strong>debajo</strong> de la regla que
permite todo hacia afuera, simplemente, <strong>no pinchará</strong> porque <strong>no machea</strong>.
Coge por la regla de salida y nunca va al pipe. Como diría los yumas &ldquo;rule of
thumbs&rdquo;</p>

<p><strong>Las reglas que envían el tráfico al pipe, debes ponerlas arriba de la regla
&ldquo;destino final&rdquo; del paquete.</strong></p>

<p>De esta manera el paquete va al pipe y luego regresa al cortafuegos. O sea,
intenta poner siempre los pipe arriba y el cortafuegos abajo</p>
]]></content>
  </entry>
  
</feed>
